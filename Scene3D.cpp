//============================================================================================================
//
//	[3D] Author : Masaki Kuboki
//
//============================================================================================================
#include "main.h"
//#include "Scene.h"
#include "Scene3D.h"
#include "RendererDX.h"

//============================================================================================================
//
// 構造体
//
//============================================================================================================
typedef struct
{
	D3DXVECTOR3 pos;
	D3DCOLOR color;
} VERTEX_GRID;

//FVFの宣言（定数）
#define FVF_VERTEX3D (D3DFVF_XYZ | D3DFVF_DIFFUSE)

VERTEX_GRID v[44];	//グリッドの配列

//============================================================================================================
//
// マクロ宣言
//
//============================================================================================================
// グリッド色
#define R (255)
#define G (0)
#define B (0)
#define A (255)

#define PRIORITY (0)
//============================================================================================================
//
//
//
//============================================================================================================
CScene3D::CScene3D(int Priority):CScene(Priority)
{
	m_Position = { 0.0f,0.0f,0.0f };
	m_fRot = 0.00f;			//立方体の回転速度
	m_nPosZ = 0;
	m_nPosX = 0;
	m_bSwitch = true;		//カメラ位置の上下反転
}

//============================================================================================================
// 
//
//
//============================================================================================================
CScene3D::~CScene3D()
{

}

//============================================================================================================
// 
//
//
//============================================================================================================
CScene3D *CScene3D::Create()
{
	CScene3D *Scene3D = new CScene3D(PRIORITY);
	Scene3D->Init();
	return Scene3D;
}

//============================================================================================================
//
// Init
//
//============================================================================================================
void CScene3D::Init(void)
{
	/*for (m_nPosZ = 0; m_nPosZ < 22; m_nPosZ += 2)
	{
		v[m_nPosZ] = { D3DXVECTOR3(-5.0f, 0.0f, m_nPosZ / 2 - 5), D3DCOLOR_RGBA(R,G,B,A) };
		v[m_nPosZ + 1] = { D3DXVECTOR3(5.0f, 0.0f, m_nPosZ / 2 - 5), D3DCOLOR_RGBA(R,G,B,A) };
	}

	for (m_nPosX = 0; m_nPosX < 22; m_nPosX += 2)
	{
		v[m_nPosX + 22] = { D3DXVECTOR3(m_nPosX / 2 - 5, 0.0f, -5.0f), D3DCOLOR_RGBA(R,G,B,A) };
		v[m_nPosX + 23] = { D3DXVECTOR3(m_nPosX / 2 - 5, 0.0f, 5.0f), D3DCOLOR_RGBA(R,G,B,A) };
	}*/
}

//============================================================================================================
//
// Uninit	
//
//============================================================================================================
void CScene3D::Uninit(void)
{}

//============================================================================================================
//
//	Update
//
//============================================================================================================
void CScene3D::Update(void)
{
	//D3DXMatrixIdentity(&m_mtxWorld);
	//D3DXMatrixIdentity(&m_mtxView);
	//D3DXMatrixIdentity(&m_mtxProjection);
}

//============================================================================================================
//
//	Draw
//
//============================================================================================================
void CScene3D::Draw(void)
{
	//LPDIRECT3DDEVICE9 pDevice = CRendererDX::GetD3DDevice();

	////FVFの設定
	//pDevice->SetFVF(FVF_VERTEX3D);
	//pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);	//ライティングする場合は外す

	//												//各種行列の設定
	//pDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);
	//pDevice->DrawPrimitiveUP(D3DPT_LINELIST, 22, &v[0], sizeof(VERTEX_GRID));
}